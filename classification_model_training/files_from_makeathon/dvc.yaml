stages:
  train:
    cmd: >-
      python train.py
      --num_classes ${train.num_classes}
      --pretrained_on_ImageNet
      --fold ${train.fold}
      --dataset ${train.dataset}
      --gt ${train.gt}
      --outdir ${train.outdir}
      --epochs ${train.epochs}
      --seed ${base.random_seed}
      --lr ${train.lr}
      --dropout_rate ${train.dropout_rate}
      --drop_connect_rate ${train.drop_connect_rate}
      --batch_norm_momentum ${train.batch_norm_momentum}
      --batch_norm_epsilon ${train.batch_norm_epsilon}
    deps:
    - data/train
    - train.py
    params:
    - base
    - train
    outs:
    - models/model_best.pt
    plots:
    - models/accuracy_fold${train.fold}.png:
        cache: false
    - models/f1_scores_fold${train.fold}.png:
        cache: false
    - models/training_loss_fold${train.fold}.png:
        cache: false
    - models/validation_loss_fold${train.fold}.png:
        cache: false
  evaluate:
    cmd: >-
      python predict.py
      --num_classes ${train.num_classes}
      --dataset ${evaluate.dataset}
      --gt ${evaluate.gt}
      --single_model_path ${train.outdir}/model_best.pt
      --metrics_file_path models/metrics-evaluate.json
    deps:
    - data/test
    - predict.py
    - models/model_best.pt
    params:
    - base
    - train
    - evaluate
    metrics:
    - models/metrics-evaluate.json:
        cache: false
  export:
    cmd: >-
      python export.py
      --single_model_path ${train.outdir}/model_best.pt
      --outdir ${export.outdir}
    deps:
    - export.py
    - models/model_best.pt
    params:
    - base
    - train
    - export
    outs:
    - models/model_best.onnx
    - models/model_best.pb
  tensorflowjs:
    cmd: >-
      tensorflowjs_converter
      --input_format=tf_saved_model
      --output_node_names=tfjs_layers_model
      --saved_model_tags=serve
      models/model_best.pb
      models/tfjs
    deps:
    - models/model_best.pb
    params:
    - base
    outs:
    - models/tfjs
